import { createContext, useContext, useState, useEffect, ReactNode } from 'react'
import { useSubscriptions } from '../shared/hooks/useSubscriptions'
import { useUserHasPaid } from '../shared/hooks/useUserHasPaid'
import { useAuth } from './AuthContext'

interface PaymentContextType {
  hasPaid: boolean
  setHasPaid: (paid: boolean) => void
  paymentModalOpen: boolean
  setPaymentModalOpen: (open: boolean) => void
  showPaymentModal: () => void
  hidePaymentModal: () => void
  refreshPaymentStatus: () => Promise<void>
  forceSetPaid: (paid: boolean) => void
  resetManualFlag: () => void
  setUserPaid: (userId: string) => Promise<boolean>
}

const PaymentContext = createContext<PaymentContextType | undefined>(undefined)

export function PaymentProvider({ children }: { children: ReactNode }) {
  const [hasPaid, setHasPaid] = useState<boolean>(false) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ false
  const [paymentModalOpen, setPaymentModalOpen] = useState(false)
  const [isManuallySet, setIsManuallySet] = useState(false) // –§–ª–∞–≥ –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  const { hasActiveSubscription } = useSubscriptions()
  const { getUserHasPaid, setUserPaid } = useUserHasPaid()
  const { authState } = useAuth()

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const initialCheck = async () => {
      if (authState.user?.id) {
        console.log('PaymentProvider: –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authState.user.id)
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const userHasPaid = await getUserHasPaid(authState.user.id)
          console.log('PaymentProvider: –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏–∑ –ë–î:', userHasPaid)
          setHasPaid(userHasPaid)
        } catch (error) {
          console.error('PaymentProvider: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã:', error)
          // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
          const localHasPaid = localStorage.getItem('hasPaid') === 'true'
          console.log('üîÑ PaymentProvider: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ localStorage:', localHasPaid)
          setHasPaid(localHasPaid)
        }
      }
    }
    
    initialCheck()
  }, [authState.user?.id, getUserHasPaid])

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const checkActiveSubscription = async () => {
      if (authState.user?.id) {
        // –ï—Å–ª–∏ hasPaid –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
        if (isManuallySet) {
          console.log('üîÑ PaymentContext: hasPaid –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é –≤ checkActiveSubscription, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º')
          return
        }
        
        try {
          const hasActive = await hasActiveSubscription(authState.user.id)
          setHasPaid(hasActive)
          localStorage.setItem('hasPaid', hasActive.toString())
        } catch (error) {
          console.error('‚ùå PaymentContext: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error)
          // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
          const localHasPaid = localStorage.getItem('hasPaid') === 'true'
          console.log('üîÑ PaymentContext: Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ localStorage:', localHasPaid)
          console.log('üîÑ PaymentContext: –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è localStorage:', {
            hasPaid: localStorage.getItem('hasPaid'),
            test_session_id: localStorage.getItem('test_session_id'),
            user: localStorage.getItem('user')
          })
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ localStorage
          setHasPaid(localHasPaid)
          console.log('üîÑ PaymentContext: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω hasPaid:', localHasPaid)
        }
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º hasPaid
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ—Ç–æ–º —Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
        console.log('üîÑ PaymentContext: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π hasPaid:', hasPaid)
        // –ù–µ –∏–∑–º–µ–Ω—è–µ–º hasPaid, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      }
    }

    checkActiveSubscription()
  }, [authState.user?.id, hasActiveSubscription, isManuallySet, hasPaid])

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem('hasPaid', hasPaid.toString())
  }, [hasPaid])

  const showPaymentModal = () => {
    setPaymentModalOpen(true)
  }

  const hidePaymentModal = () => {
    setPaymentModalOpen(false)
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç Supabase)
  const forceSetPaid = async (paid: boolean) => {
    console.log('üîÑ PaymentContext: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hasPaid:', paid)
    setHasPaid(paid)
    localStorage.setItem('hasPaid', paid.toString())
    setIsManuallySet(true) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    if (authState.user?.id && paid) {
      try {
        await setUserPaid(authState.user.id)
        console.log('üîÑ PaymentContext: –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authState.user.id)
      } catch (error) {
        console.error('‚ùå PaymentContext: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î:', error)
      }
    }
    
    console.log('üîÑ PaymentContext: hasPaid —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤:', paid, 'isManuallySet:', true)
  }

  // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  const resetManualFlag = () => {
    console.log('üîÑ PaymentContext: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ isManuallySet')
    setIsManuallySet(false)
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
  const refreshPaymentStatus = async () => {
    if (authState.user?.id) {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', authState.user.id)
      console.log('üîÑ –¢–µ–∫—É—â–∏–π hasPaid –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º:', hasPaid)
      console.log('üîÑ localStorage hasPaid –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º:', localStorage.getItem('hasPaid'))
      console.log('üîÑ isManuallySet:', isManuallySet)
      
      // –ï—Å–ª–∏ hasPaid –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
      if (isManuallySet) {
        console.log('üîÑ PaymentContext: hasPaid –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º')
        return
      }
      
      try {
        const hasActive = await hasActiveSubscription(authState.user.id)
        console.log('üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏–∑ Supabase:', hasActive)
        setHasPaid(hasActive)
        localStorage.setItem('hasPaid', hasActive.toString())
        console.log('üîÑ hasPaid —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤:', hasActive)
      } catch (error) {
        console.error('‚ùå PaymentContext: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã:', error)
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        const localHasPaid = localStorage.getItem('hasPaid') === 'true'
        console.log('üîÑ PaymentContext: Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ localStorage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', localHasPaid)
        console.log('üîÑ PaymentContext: –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è localStorage:', {
          hasPaid: localStorage.getItem('hasPaid'),
          test_session_id: localStorage.getItem('test_session_id'),
          user: localStorage.getItem('user')
        })
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ localStorage
        setHasPaid(localHasPaid)
        console.log('üîÑ PaymentContext: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω hasPaid:', localHasPaid)
      }
    } else {
      console.log('üîÑ refreshPaymentStatus: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π hasPaid:', hasPaid)
      // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º hasPaid, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ—Ç–æ–º —Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
    }
  }

  return (
    <PaymentContext.Provider value={{
      hasPaid,
      setHasPaid,
      paymentModalOpen,
      setPaymentModalOpen,
      showPaymentModal,
      hidePaymentModal,
      refreshPaymentStatus,
      forceSetPaid,
      resetManualFlag,
      setUserPaid
    }}>
      {children}
    </PaymentContext.Provider>
  )
}

export function usePaymentContext() {
  const context = useContext(PaymentContext)
  if (!context) {
    throw new Error('usePaymentContext must be used within a PaymentProvider')
  }
  return context
}
