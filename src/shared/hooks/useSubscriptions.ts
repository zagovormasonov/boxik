import { useState } from 'react'
import { supabase } from '../../lib/supabase'

export interface Subscription {
  id: string
  user_id: string
  payment_id: string
  order_id: string
  amount: number
  status: 'pending' | 'confirmed' | 'cancelled' | 'failed'
  payment_url?: string
  created_at: string
  updated_at: string
  expires_at?: string
  metadata?: any
}

export interface CreateSubscriptionData {
  user_id: string
  payment_id: string
  order_id: string
  amount: number
  payment_url?: string
  metadata?: any
}

export function useSubscriptions() {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã subscriptions
  const checkTableExists = async (): Promise<boolean> => {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã subscriptions...')
      const { error } = await supabase
        .from('subscriptions')
        .select('id')
        .limit(1)
      
      if (error) {
        console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ subscriptions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error)
        return false
      }
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ subscriptions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞')
      return true
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã subscriptions:', err)
      return false
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
  const createSubscription = async (data: CreateSubscriptionData): Promise<Subscription | null> => {
    setIsLoading(true)
    setError(null)

    try {
      console.log('üîç –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ Supabase:', data)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user }, error: userError } = await supabase.auth.getUser()
      console.log('üîç –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user?.id, '–û—à–∏–±–∫–∞:', userError)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      if (user?.id !== data.user_id) {
        console.error('‚ùå user_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', { 
          currentUser: user?.id, 
          dataUserId: data.user_id 
        })
        throw new Error('user_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
      }
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      const tableExists = await checkTableExists()
      if (!tableExists) {
        throw new Error('–¢–∞–±–ª–∏—Ü–∞ subscriptions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç create_subscriptions_table.sql –≤ Supabase.')
      }
      
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase:', supabase)

      const { data: subscription, error } = await supabase
        .from('subscriptions')
        .insert([{
          user_id: data.user_id,
          payment_id: data.payment_id,
          order_id: data.order_id,
          amount: data.amount,
          status: 'pending',
          payment_url: data.payment_url,
          metadata: data.metadata || {}
        }])
        .select()
        .single()

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error)
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        })
        throw error
      }

      console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', subscription)
      return subscription
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', err)
      setError(err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
      return null
    } finally {
      setIsLoading(false)
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  const updateSubscriptionStatus = async (
    paymentId: string, 
    status: 'confirmed' | 'cancelled' | 'failed',
    metadata?: any
  ): Promise<Subscription | null> => {
    setIsLoading(true)
    setError(null)

    try {
      console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:', { paymentId, status })

      const { data: subscription, error } = await supabase
        .from('subscriptions')
        .update({
          status,
          metadata: metadata || {},
          updated_at: new Date().toISOString()
        })
        .eq('payment_id', paymentId)
        .select()
        .single()

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error)
        throw error
      }

      console.log('–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω:', subscription)
      return subscription
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', err)
      setError(err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
      return null
    } finally {
      setIsLoading(false)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getActiveSubscription = async (userId: string): Promise<Subscription | null> => {
    setIsLoading(true)
    setError(null)

    try {
      const { data: subscriptions, error } = await supabase
        .from('subscriptions')
        .select('*')
        .eq('user_id', userId)
        .eq('status', 'confirmed')
        .order('created_at', { ascending: false })
        .limit(1)

      if (error) {
        console.error('‚ùå useSubscriptions: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error)
        console.error('‚ùå useSubscriptions: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        })
        throw error
      }

      if (!subscriptions || subscriptions.length === 0) {
        return null
      }

      return subscriptions[0]
    } catch (err) {
      console.error('‚ùå useSubscriptions: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', err)
      setError(err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
      return null
    } finally {
      setIsLoading(false)
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
  const hasActiveSubscription = async (userId: string): Promise<boolean> => {
    try {
      const subscription = await getActiveSubscription(userId)
      return subscription !== null
    } catch (error) {
      console.error('‚ùå hasActiveSubscription: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error)
      return false
    }
  }

  return {
    createSubscription,
    updateSubscriptionStatus,
    getActiveSubscription,
    hasActiveSubscription,
    checkTableExists,
    isLoading,
    error
  }
}
