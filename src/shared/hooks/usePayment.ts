import { useState } from 'react'
import CryptoJS from 'crypto-js'
import { useSubscriptions } from './useSubscriptions'

export interface PaymentConfig {
  terminalKey: string
  password: string
  apiUrl: string
  amount: number
  description: string
  userId?: string
  userEmail?: string
  isTestMode?: boolean
}

export interface PaymentResult {
  success: boolean
  paymentId?: string
  paymentUrl?: string
  error?: string
}

export interface TinkoffInitRequest {
  TerminalKey: string
  Amount: number
  OrderId: string
  Description: string
  Token: string
  SuccessURL?: string
  FailURL?: string
}

export interface TinkoffInitResponse {
  Success: boolean
  ErrorCode: string
  Message?: string
  Details?: string
  TerminalKey: string
  Status: string
  PaymentId: string
  PaymentURL?: string
}

export function usePayment() {
  const [isProcessing, setIsProcessing] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const { createSubscription } = useSubscriptions()

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ –°–ë–ü
  const defaultConfig: PaymentConfig = {
    terminalKey: import.meta.env.VITE_TINKOFF_TERMINAL_KEY || process.env.VITE_TINKOFF_TERMINAL_KEY || 'your_terminal_key',
    password: import.meta.env.VITE_TINKOFF_PASSWORD || process.env.VITE_TINKOFF_PASSWORD || 'your_password',
    apiUrl: import.meta.env.VITE_TINKOFF_API_URL || process.env.VITE_TINKOFF_API_URL || 'https://securepay.tinkoff.ru/v2/',
    amount: 200, // 200 —Ä—É–±–ª–µ–π –∑–∞ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    description: '–î–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞ –ë–ü–î'
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
  const generateToken = (params: Record<string, any>, password: string): string => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á—É
    const sortedParams = Object.keys(params)
      .sort()
      .reduce((result, key) => {
        result[key] = params[key]
        return result
      }, {} as Record<string, any>)

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    sortedParams.Password = password

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è, –±–µ–∑ –∫–ª—é—á–µ–π)
    const tokenString = Object.values(sortedParams).join('')

    console.log('üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω:', {
      sortedParams: { ...sortedParams, Password: '[–°–ö–†–´–¢–û]' },
      tokenStringLength: tokenString.length
    })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SHA-256 —Ö–µ—à
    return CryptoJS.SHA256(tokenString).toString()
  }

  const createPayment = async (config: Partial<PaymentConfig> = {}): Promise<PaymentResult> => {
    setIsProcessing(true)
    setError(null)

    try {
      const paymentConfig = { ...defaultConfig, ...config }
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      console.log('üîß –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:')
      console.log('- VITE_TINKOFF_TERMINAL_KEY:', import.meta.env.VITE_TINKOFF_TERMINAL_KEY ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      console.log('- VITE_TINKOFF_PASSWORD:', import.meta.env.VITE_TINKOFF_PASSWORD ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      console.log('- VITE_TINKOFF_API_URL:', import.meta.env.VITE_TINKOFF_API_URL || '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
      if (paymentConfig.terminalKey === 'your_terminal_key' || paymentConfig.password === 'your_password' || paymentConfig.isTestMode) {
        console.warn('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', {
          envNotSet: paymentConfig.terminalKey === 'your_terminal_key' || paymentConfig.password === 'your_password',
          explicitTestMode: paymentConfig.isTestMode
        })
        
        // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å–∏–º—É–ª—è—Ü–∏—è
        await new Promise(resolve => setTimeout(resolve, 1000))
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ Supabase –¥–∞–∂–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        if (paymentConfig.userId) {
          const testPaymentId = 'test_payment_' + Date.now()
          const testOrderId = `u${paymentConfig.userId.substring(0, 8)}test${Date.now().toString().substring(8)}`
          
          const subscriptionData = {
            user_id: paymentConfig.userId,
            payment_id: testPaymentId,
            order_id: testOrderId,
            amount: paymentConfig.amount * 100, // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            payment_url: 'https://securepay.tinkoff.ru/payments/test_payment',
            metadata: {
              user_email: paymentConfig.userEmail,
              description: paymentConfig.description,
              created_at: new Date().toISOString(),
              is_test_mode: true
            }
          }

          console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ Supabase:', subscriptionData)
          await createSubscription(subscriptionData)
          
          const mockResult: PaymentResult = {
            success: true,
            paymentId: testPaymentId,
            paymentUrl: `/payment/callback?PaymentId=${testPaymentId}&Status=CONFIRMED&OrderId=${testOrderId}`
          }
          
          console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', mockResult)
          return mockResult
        }
        
        const mockResult: PaymentResult = {
          success: true,
          paymentId: 'test_payment_' + Date.now(),
          paymentUrl: '/payment/callback?PaymentId=test_payment_' + Date.now() + '&Status=CONFIRMED&OrderId=test_order_' + Date.now()
        }
        
        console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', mockResult)
        return mockResult
      }

      console.log('üí≥ –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –°–ë–ü:', {
        terminalKey: paymentConfig.terminalKey,
        amount: paymentConfig.amount,
        description: paymentConfig.description,
        apiUrl: paymentConfig.apiUrl
      })

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ)
      const timestamp = Date.now().toString()
      const random = Math.random().toString(36).substring(2, 8)
      let orderId = paymentConfig.userId 
        ? `u${paymentConfig.userId.substring(0, 8)}${timestamp.substring(timestamp.length - 8)}${random}`
        : `o${timestamp.substring(timestamp.length - 10)}${random}`

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É OrderId
      if (orderId.length > 20) {
        orderId = `o${timestamp.substring(timestamp.length - 15)}${random}`
        console.warn('OrderId —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π:', orderId)
      }

      // –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
      const cleanDescription = paymentConfig.description
        .replace(/[^\w\s\-\.]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤ –∏ —Ç–æ—á–µ–∫
        .substring(0, 250) // –ú–∞–∫—Å–∏–º—É–º 250 —Å–∏–º–≤–æ–ª–æ–≤

      console.log('–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        userId: paymentConfig.userId,
        userEmail: paymentConfig.userEmail,
        orderId,
        cleanDescription
      })

      // –î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è callback'–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å)
      const callbackUrl = `${window.location.origin}/payment/callback`
      console.log('Callback URL:', callbackUrl)

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const requestData: TinkoffInitRequest = {
        TerminalKey: paymentConfig.terminalKey,
        Amount: paymentConfig.amount * 100, // –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        OrderId: orderId,
        Description: cleanDescription,
        SuccessURL: callbackUrl,
        FailURL: callbackUrl,
        Token: '' // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const token = generateToken({
        TerminalKey: requestData.TerminalKey,
        Amount: requestData.Amount,
        OrderId: requestData.OrderId,
        Description: requestData.Description,
        SuccessURL: requestData.SuccessURL,
        FailURL: requestData.FailURL
      }, paymentConfig.password)

      requestData.Token = token

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      if (!requestData.TerminalKey || requestData.TerminalKey.length === 0) {
        throw new Error('TerminalKey –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      }
      if (requestData.Amount <= 0) {
        throw new Error('Amount –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
      }
      if (!requestData.OrderId || requestData.OrderId.length === 0) {
        throw new Error('OrderId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      }
      if (requestData.OrderId.length > 20) {
        throw new Error('OrderId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤')
      }
      if (!requestData.Description || requestData.Description.length === 0) {
        throw new Error('Description –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ:', {
        url: paymentConfig.apiUrl + 'Init',
        data: { 
          TerminalKey: requestData.TerminalKey,
          Amount: requestData.Amount,
          OrderId: requestData.OrderId,
          Description: requestData.Description,
          SuccessURL: requestData.SuccessURL,
          FailURL: requestData.FailURL,
          Token: '[–°–ö–†–´–¢–û]'
        }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
      const response = await fetch(paymentConfig.apiUrl + 'Init', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result: TinkoffInitResponse = await response.json()

      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ:', result)

      if (result.Success) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ Supabase
        if (paymentConfig.userId) {
          const subscriptionData = {
            user_id: paymentConfig.userId,
            payment_id: result.PaymentId,
            order_id: orderId,
            amount: paymentConfig.amount * 100, // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            payment_url: result.PaymentURL,
            metadata: {
              user_email: paymentConfig.userEmail,
              description: paymentConfig.description,
              created_at: new Date().toISOString()
            }
          }

          console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ Supabase:', subscriptionData)
          await createSubscription(subscriptionData)
        }

        return {
          success: true,
          paymentId: result.PaymentId,
          paymentUrl: result.PaymentURL
        }
      } else {
        const errorMessage = `–û—à–∏–±–∫–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: ${result.Message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'} (–∫–æ–¥: ${result.ErrorCode})`
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', errorMessage)
        setError(errorMessage)
        return {
          success: false,
          error: errorMessage
        }
      }

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', err)
      const errorMessage = err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      setError(errorMessage)
      return {
        success: false,
        error: errorMessage
      }
    } finally {
      setIsProcessing(false)
    }
  }

  const checkPaymentStatus = async (paymentId: string): Promise<boolean> => {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API
      // –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
      console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:', paymentId)
      
      await new Promise(resolve => setTimeout(resolve, 500))
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
      // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /GetState
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      // 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –µ—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω

      return true // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', err)
      return false
    }
  }

  return {
    createPayment,
    checkPaymentStatus,
    isProcessing,
    error,
    defaultConfig
  }
}