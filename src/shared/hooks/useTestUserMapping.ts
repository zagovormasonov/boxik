import { useState } from 'react'
import { supabase } from '../../lib/supabase'

export interface TestUserMapping {
  id: string
  session_id: string
  user_id: string
  test_result_id: string
  created_at: string
  updated_at: string
}

export interface CreateTestUserMappingData {
  session_id: string
  user_id: string
  test_result_id: string
}

export function useTestUserMapping() {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–µ—Å—Å–∏–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  const createMapping = async (data: CreateTestUserMappingData): Promise<TestUserMapping | null> => {
    setIsLoading(true)
    setError(null)

    try {
      console.log('üîó useTestUserMapping: –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–µ—Å—Å–∏–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', data)

      const { data: mapping, error } = await supabase
        .from('test_user_mapping')
        .insert([{
          session_id: data.session_id,
          user_id: data.user_id,
          test_result_id: data.test_result_id
        }])
        .select()
        .single()

      if (error) {
        console.error('‚ùå useTestUserMapping: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏:', error)
        throw error
      }

      console.log('‚úÖ useTestUserMapping: –°–≤—è–∑—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', mapping)
      return mapping
    } catch (err) {
      console.error('‚ùå useTestUserMapping: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏:', err)
      setError(err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å')
      return null
    } finally {
      setIsLoading(false)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getTestResultsForUser = async (userId: string): Promise<string[]> => {
    setIsLoading(true)
    setError(null)

    try {
      console.log('üîç useTestUserMapping: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)

      const { data: mappings, error } = await supabase
        .from('test_user_mapping')
        .select('test_result_id')
        .eq('user_id', userId)

      console.log('üîç useTestUserMapping: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:', { mappings, error })

      if (error) {
        console.error('‚ùå useTestUserMapping: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤—è–∑–µ–π:', error)
        console.error('‚ùå useTestUserMapping: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        })
        throw error
      }

      const testResultIds = mappings?.map(m => m.test_result_id) || []
      console.log('‚úÖ useTestUserMapping: –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:', testResultIds)
      return testResultIds
    } catch (err) {
      console.error('‚ùå useTestUserMapping: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤—è–∑–µ–π:', err)
      setError(err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏')
      return []
    } finally {
      setIsLoading(false)
    }
  }

  // –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  const linkExistingTestResults = async (userId: string, sessionId: string): Promise<boolean> => {
    setIsLoading(true)
    setError(null)

    try {
      console.log('üîó useTestUserMapping: –°–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', { userId, sessionId })

      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ø–æ session_id
      const { data: testResults, error: testError } = await supabase
        .from('test_results')
        .select('id')
        .eq('user_id', sessionId) // session_id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ user_id –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

      if (testError) {
        console.error('‚ùå useTestUserMapping: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞:', testError)
        console.error('‚ùå useTestUserMapping: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          code: testError.code,
          message: testError.message,
          details: testError.details,
          hint: testError.hint
        })
        
        // –î–ª—è –æ—à–∏–±–æ–∫ RLS (406, PGRST301) –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
        if (testError.code === 'PGRST301' || testError.message?.includes('406')) {
          console.warn('‚ö†Ô∏è useTestUserMapping: –ü—Ä–æ–±–ª–µ–º—ã —Å RLS, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É')
          return false
        }
        
        throw testError
      }

      if (!testResults || testResults.length === 0) {
        console.log('‚ÑπÔ∏è useTestUserMapping: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId)
        return false
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º user_id –≤ —Ç–∞–±–ª–∏—Ü–µ test_results –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
      for (const testResult of testResults) {
        console.log('üîÑ useTestUserMapping: –û–±–Ω–æ–≤–ª—è–µ–º user_id –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞:', testResult.id)
        
        const { error: updateError } = await supabase
          .from('test_results')
          .update({ user_id: userId })
          .eq('id', testResult.id)

        if (updateError) {
          console.error('‚ùå useTestUserMapping: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ user_id:', updateError)
          console.error('‚ùå useTestUserMapping: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
            code: updateError.code,
            message: updateError.message,
            details: updateError.details,
            hint: updateError.hint
          })
          
          // –î–ª—è –æ—à–∏–±–æ–∫ RLS (406, PGRST301) –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
          if (updateError.code === 'PGRST301' || updateError.message?.includes('406')) {
            console.warn('‚ö†Ô∏è useTestUserMapping: –ü—Ä–æ–±–ª–µ–º—ã —Å RLS –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
            continue
          }
          
          throw updateError
        }

        console.log('‚úÖ useTestUserMapping: user_id –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', testResult.id)
      }

      console.log('‚úÖ useTestUserMapping: –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å–≤—è–∑–∞–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
      return true
    } catch (err) {
      console.error('‚ùå useTestUserMapping: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', err)
      setError(err instanceof Error ? err.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
      return false
    } finally {
      setIsLoading(false)
    }
  }

  const checkTableExists = async (): Promise<boolean> => {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã test_user_mapping...')
      const { error } = await supabase
        .from('test_user_mapping')
        .select('id')
        .limit(1)

      if (error) {
        console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ test_user_mapping –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error)
        return false
      }

      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ test_user_mapping —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞')
      return true
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã test_user_mapping:', err)
      return false
    }
  }

  return {
    createMapping,
    getTestResultsForUser,
    linkExistingTestResults,
    checkTableExists,
    isLoading,
    error
  }
}
